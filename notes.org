* Course Learning Objectives 

By taking this course, you will be able to:

- Describe Business Blockchain and Distributed Ledger Technologies.
- Gain familiarity with current Hyperledger projects and cross-industry use cases.
- Perform clean installations of the Hyperledger Sawtooth and Hyperledger Fabric frameworks.
- Explore a sample use case/application in the context of the Hyperledger Sawtooth and Hyperledger Fabric frameworks.
- Build simple applications on top of Hyperledger Sawtooth and Hyperledger Fabric.
- Become involved in and contribute to the open source Hyperledger projects.


* Hyperledger

Hyperledger is the umbrella open source project that The Linux Foundation has created and hosted since 2015. It aims at advancing and promoting cross-industry blockchain technologies to ensure accountability, transparency, and trust among business partners. As a result, Hyperledger makes business network and transactions more efficient.

These benefits are valued by leaders across many industries, including technology, finance, healthcare, supply chain, and automotive, among several others.

Hyperledger offers different blockchain platforms. This course will present three of them: Iroha, Sawtooth, and Fabric.

To learn more about the Hyperledger, [[https://www.hyperledger.org/][click here]]

* The Linux Foundation

The Linux Foundation partners with the world's leading developers and companies to solve the hardest technology problems and accelerate open technology development and commercial adoption. The Linux Foundation makes it its mission to provide experience and expertise to any initiative working to solve complex problems through open source collaboration, providing the tools to scale open source projects: security best practices, governance, operations and ecosystem development, training and certification, licensing, and promotion.

Linux is the world's largest and most pervasive open source software project in history. The Linux Foundation is home to Linux creator Linus Torvalds and lead maintainer Greg Kroah-Hartman, and provides a neutral home where Linux kernel development can be protected and accelerated for years to come. The success of Linux has catalyzed growth in the open source community, demonstrating the commercial efficacy of open source and inspiring countless new projects across all industries and levels of the technology stack.

The Linux Foundation's work today extends far beyond Linux, fostering innovation at every layer of the software stack. The Linux Foundation is the umbrella organization for many critical open source projects that power corporations today, spanning all industry sectors:

- Big data and analytics: ODPi, R Consortium
- Networking: OpenDaylight, OPNFV
- Embedded: Dronecode, Zephyr
- Web tools: JS Foundation, Node.js
- Cloud computing: Cloud Foundry, Cloud Native Computing Foundation, Open Container Initiative
- Automotive: Automotive Grade Linux
- Security: The Core Infrastructure Initiative
- Blockchain: Hyperledger
- And many more.

To learn more about The Linux Foundation, [[https://www.linuxfoundation.org/][click here]]


* Chapter 1. Discovering Blockchain Technologies 

By the end of this chapter you should be able to:

- Discuss blockchain and distributed ledger technologies (DLT).
- Explore permissioned and permissionless blockchains and their key characteristics.
- Discuss various components of distributed ledger technologies, including consensus algorithms and smart contracts.
- Provide a high-level explanation of what Hyperledger is.

** Distributed Ledger Technology (DLT) 

*** Background - The Rising Interest in Distributed Ledger Technologies

Looking back to the last half century of computer technologies and architectures, one may observe a trend of fluctuation between the centralization and subsequent decentralization of computing power, storage, infrastructure, protocols, and code.

Mainframe computers are largely centralized. They typically house all computing power, memory, data storage, and code. Access to mainframes is mainly by 'dumb terminals', which only take inputs and outputs, and do not store or process data.

With the advent of personal computers and private networks, similar computational capabilities were now housed both on the clients, as well as the servers. This, in part, gave rise to the 'client-server' architecture, which supported the development of relational database systems. Massive data sets, which are housed on mainframes, could move onto a distributed architecture. This data could replicate from server to server, and subsets of the data could be accessed and processed on clients, and then, synced back to the server.

Over time, Internet and cloud computing architectures enabled global access from a variety of computing devices; whereas mainframes were largely designed to address the needs of large corporations and governments. Even though this 'cloud architecture' is decentralized in terms of hardware, it has given rise to application-level centralization (e.g. Facebook, Twitter, Google, etc).

Currently, we are witnessing the transition from centralized computing, storage, and processing to decentralized architectures and systems. According to [[https://medium.com/@muneeb/the-next-wave-of-computing-743295b4bc73][Muneeb Ali]], these systems aim to

#+BEGIN_QUOTE
"give explicit control of digital assets to end-users and remove the need to trust any third-party servers and infrastructure".
#+END_QUOTE


Distributed ledger technology is one of the key innovations making this shift possible.

*** Distributed Ledger Technology (DLT)

A *distributed ledger* is a type of data structure which resides across multiple computer devices, generally spread across locations or regions.

*Distributed Ledger Technology* includes blockchain technologies and smart contracts. While distributed ledgers existed prior to Bitcoin, the Bitcoin blockchain marks the convergence of a host of technologies, including timestamping of transactions, Peer-to-Peer (P2P) networks, cryptography, and shared computational power, along with a new consensus algorithm. 

In summary, distributed ledger technology generally consists of [[https://intelledger.github.io/introduction.html][three basic components]]:

- A *data model* that captures the current state of the ledger
- A *language of transactions* that changes the ledger state
- A *protocol* used to build consensus among participants around which transactions will be accepted, and in what order, by the ledger.

*** Blockchains 

According to [[https://hyperledger.org/about][hyperledger.org]],

#+BEGIN_QUOTE
"A blockchain is a peer-to-peer distributed ledger forged by consensus, combined with a system for "smart contracts" and other assistive technologies."
#+END_QUOTE

- *Smart contracts* are simply computer programs that execute predefined actions when certain conditions within the system are met.

- *Consensus* refers to a system of ensuring that parties agree to a certain state of the system as the true state.

*Blockchain* is a specific form or subset of distributed ledger technologies, which constructs a chronological chain of *blocks*, hence the name 'block-chain'. A block refers to a set of transactions that
 are bundled together and added to the chain at the same time. In the Bitcoin blockchain, the miner nodes bundle unconfirmed and valid transactions into a block. 
Each block contains a given number of transactions. In the Bitcoin network, miners must solve a cryptographic challenge to propose the next block. This process is
 known as '*proof of work*', and requires significant computing power. We shall discuss proof of work in more detail in the Consensus Algorithms section. For a brief history of blockchain technology, please [[https://hbr.org/2017/02/a-brief-history-of-blockchain][click here]].

*Timestamping* is another key feature of blockchain technology. Each block is timestamped, with each new block referring to the previous block. Combined with *cryptographic hashes*, this timestamped chain of blocks provides an immutable record of all transactions in the network, from the very first (or genesis) block.

A block commonly consists of four pieces of metadata:

- The reference to the previous block
- The proof of work, also known as a nonce
- The timestamp
- The Merkle tree root for the transactions included in this block.

*** Merkle Tree

The Merkle tree, also known as a binary hash tree, is a data structure that is used to store hashes of the individual data in large datasets in a way to make the verification of the dataset efficient. 
It is an *anti-tamper mechanism* to ensure that the large dataset has not been changed. The word 'tree' is used to refer to a branching data structure in computer science, as seen in the image below. 
According to Andreas M. Antonopoulos, in the Bitcoin protocol,

#+BEGIN_QUOTE
"Merkle trees are used to summarize all the transactions in a block, producing an overall digital fingerprint of the entire set of transactions, providing a very efficient process to verify whether a transaction is included in a block."
#+END_QUOTE


 #+CAPTION: Bitcoin Block Data (licensed under Creative Commons Attribution-Share-Alike 3.0 Unported, retrieved from Wikipedia)
     #+NAME:   fig:bitcoin_block_data
     [[file:img/Bitcoin_Block_Data.png]]

*** Transactions

The record of an event, cryptographically secured with a digital signature, that is verified, ordered, and bundled together into blocks, 
form the *transactions* in the blockchain. In the Bitcoin blockchain, transactions involve the transfer of bitcoins, while in other blockchains,
transactions may involve the transfer of any asset or a record of some service being rendered. Furthermore, a smart contract
within the blockchain may allow automatic execution of transactions upon meeting predefined criteria.


*Cryptography* has a key role to play both in the security, as well as in the immutability of the transactions
 recorded on blockchains. Cryptography is the study of the techniques used to allow secure communication between different parties and to
 ensure the authenticity and immutability of the data being communicated. For blockchain technologies, cryptography is used to prove that a
 transaction was created by the right person. It is also used to link transactions into a block in a tamper-proof way, as well as create the links between blocks, to form a blockchain.

*** Differences between Blockchains and Databases

Blockchain technology has some key differentiators from databases. 

A blockchain is a write-only data structure, where new entries get appended onto the end of the ledger. Every
 new block gets appended to the block chain by linking to the previous block's 'hash'.
 There are no administrator permissions within a blockchain that allow editing or deleting of data.

In a relational database, data can be easily modified or deleted. Typically, there are database administrators who may make changes
 to any part of the data and/or its structure. Additionally, blockchains were designed for decentralized applications, whereas relational databases
, in general, were originally designed for centralized applications, where a single entity controls the data.


 #+CAPTION: Blockchains VS Databases
     #+NAME:   fig:Centralized_Databases_vs_Blockchain
     [[file:img/Centralized_Databases_vs_Blockchain.png]]

*** Types of Blockchains

A blockchain can be both *permissionless* (like Bitcoin or Ethereum) or *permissioned* (like the different Hyperledger blockchain frameworks). A permissionless
 blockchain is also known as a public blockchain, because anyone can join the network. A permissioned blockchain, or private blockchain
, requires pre-verification of the participating parties within the network, and these parties are usually known to each other.

The choice between permissionless versus permissioned blockchains should be driven by the particular application at hand (or use case). Most
 enterprise use cases involve extensive vetting before parties agree to do business with each other. An example where a number
 of businesses exchange information is the supply chain management. The supply chain management is an ideal use case for permissioned
 blockchains. You would not want non-vetted companies participating in the network. Each participant that is involved in the supply
 chain would require permissions to execute transactions on the blockchain. These transactions would allow other companies to understand where in
 the supply chain a particular item is. 

On the contrary, when a network can 'commoditize' trust, facilitating parties to transact without necessarily having to verify each other's
 identity, like the Bitcoin blockchain, a permissionless blockchain is more suitable. Many of these instances involve the sale or distribution
 to the public. Cryptocurrencies and Initial Coin Offerings (which are not backed by national governments) usually involve implementations of permissionless blockchains.

*** Peer-to-Peer Network Architecture

Historically, most applications utilize a central server (or servers). For one user/client to send a message to another user/client
 in the network, the request has to be sent to the hub or a central server, which then directs it to the right computer.

*Peer-to-peer* (P2P) networks were first made popular by Napster (and later BitTorrent) and consist of computer systems which
 are directly connected to each other via the Internet, without a central server. Peers contribute to the computing power and
 storage that is required for the upkeep of the network. P2P networks are generally considered to be more secure than
 centralized networks, as they do not have a single point of attack, as in the case of a server-based
 network, where the security of the entire network can be compromised if the central server is successfully attacked. As a
 result, large corporations invest significant amounts of financial resources to fortify their central servers, and yet, a total cost of
 $445 billion to the global economy in cyberspace crimes was estimated by the World Economic Forum's [[https://www.weforum.org/reports/the-global-risks-report-2016][2016 Global Risk Report]].

Permissionless P2P systems do not require a set amount of peers to be online and are generally slower. Permissioned P2P
 networks have to guarantee uptime and require a high level of quality of service on the communication links.


 #+CAPTION: Network Architectures
     #+NAME:   fig:Network_Architectures
[[file:img/Network_Architectures.png]]

*** Immutability of Data

The immutability of the data which sits on the blockchain is perhaps the most powerful and convincing reason to deploy
 blockchain-based solutions for a variety of socio-economic processes which are currently recorded on centralized servers. This *immutability*, or '*unchanging over time*' feature
 makes the blockchain useful for accounting, financial transactions, identity management, and asset ownership, management and transfer, just
 to name a few examples. Once a transaction is written onto the blockchain, no one can change it, or, at least, it would be extremely difficult to change it.

According to [[https://www.linkedin.com/pulse/gentle-introduction-immutability-blockchains-antony-lewis/][Antony Lewis]], the Director of Research at R3, 

#+BEGIN_QUOTE
"When people say that blockchains are immutable, they don't mean that the data can't be changed, they mean it is extremely hard to change without collusion, and if you try, it's extremely easy to detect the attempt."
#+END_QUOTE

Let's dig into this statement a bit further. It is extremely hard to change the transactions in a blockchain, because
 each block is linked to the previous block by including the previous block's hash. This hash includes the Merkle root
 hash of all the transactions in the previous block. If a single transaction were to change, not only would the
 Merkle root hash change, but so too would the hash contained in the changed block. In addition, each subsequent block
 would need to be updated to reflect this change. In the case of proof of work, the amount of energy
 required to recalculate the nonce for this block and each subsequent block would be prohibitive. On the other hand, if
 someone did modify a transaction in a block without going through the necessary steps to update the subsequent blocks, it
 would be easy to recalculate the hashes used in the blocks and determine that something is amiss.

Let's look at an example of how this works. In the following diagram, we see the original blocks and the
 transactions for Block 11. Specifically, we see that the Merkle root for the transactions in Block 11 is *Hash #ABCD*, which
 is the combined hash for the four transactions in this block. Now, let's say that someone comes in and attempts
 to change Transaction A to Transaction A'. This, in turn, modifies the hashes that are stored in the Merkle tree, and the Merkle root changes to *Hash #A'BCD*.
 In addition, the Previous Block hash stored in Block 12 also needs to be modified to reflect the overall change in the hash for Block 11.


 #+CAPTION: Blockchain Immutability
     #+NAME:   fig:BLOCKCHAIN_IMMUTABILITY
     [[file:img/BLOCKCHAIN_IMMUTABILITY.png]]



*** Blockchain Applications

Since blockchain is a new form of digital infrastructure, applications built on top of a blockchain provide a gateway to
 accessing information that sits on that blockchain. In other words, clients/users interact with the blockchain through applications. Starting from
 the simple wallets that hold bitcoins, sophisticated applications which encompass applications addressing digital identity (e.g. UPort, KYC-Chain, Netki, etc.), and
 complex financial transactions are being built on the blockchain.

A more exhaustive list of companies using blockchain technology for identity management and authentication can be found [[https://letstalkpayments.com/22-companies-leveraging-blockchain-for-identity-management-and-authentication/][here]].

For more details about blockchain applications, you can refer to Daniel Palmer's article at [[https://www.coindesk.com/7-cool-decentralized-apps-built-ethereum/][coindesk.com]].


*** Smart Contracts

*Smart contracts* are simply computer programs that execute predefined actions when certain conditions within the system are met. Smart contracts
 provide the *language of transactions* that allow the ledger state to be modified. They can facilitate the exchange and transfer
 of anything of value (e.g. shares, money, content, property).


 #+CAPTION: Blockchain and Smart Contracts - Flow_Diagram
     #+NAME:   fig:Blockchain_and_Smar_Contracts_-_Flow_Diagram
     [[file:img/Blockchain_and_Smar_Contracts_-_Flow_Diagram.png]]


** Bitcoin and Ethereum Blockchains
*** Bitcoin - A Popular Blockchain Deployment

With the invention of the peer-to-peer (P2P) cash system known as Bitcoin in 2008, we have an example
 of a global decentralized payment network with a distributed and publicly-owned infrastructure, operating as a 'permissionless' system. There is
 a persuasive case that Bitcoin is the first 'killer application' of decentralized computing. One can send and receive bitcoins anywhere
 in the world in a completely P2P manner, without having to intermediate through a trusted third party, such as a bank.



According to the [[https://coinmarketcap.com/currencies/bitcoin/][Coin Market Capitalizations]] website, as of October 2017, bitcoin's market capitalization (market cap) was nearly $100 billion. 


 #+CAPTION: Bitcoin Charts (Source: [[https://coinmarketcap.com/currencies/bitcoin/]])
     #+NAME:   fig:Market_Cap
     [[file:img/Market_Cap.png]]


According to [[https://angel.co/blockchains][AngelList]], more than one thousand startups have been created to leverage Bitcoin and blockchain-related technologies since the
 inception of the Bitcoin payment system. Hundreds of large companies, and dozens of governments and universities have become actively involved
 in researching, testing, and prototyping blockchain protocols, platforms, and applications. In particular, the financial services sector has been actively investing
 in exploring wider applications of distributed ledger technologies (of which, blockchain is a subset) since late 2015.

*** Bitcoin and Cryptoeconomics

Bitcoin has also ushered in tremendous academic and research interest in the area of Cryptoeconomics and Cryptoeconomic security.

According to [[https://www.youtube.com/watch?v%3DpKqdjaH1dRo][Vitalik Buterin]],

#+BEGIN_QUOTE
"Cryptoeconomics is about building systems that have certain desired properties using cryptography to prove properties about messages that happened in
 the past while using economic incentives defined inside the system to encourage desired properties to hold into the future."
#+END_QUOTE


In other words, the field of Cryptoeconomics explores the intersection of cryptography and economic incentives. While cryptography is used for
 ensuring network security at various levels and functions, the built-in economic incentives provided to the participating nodes in the
 network ensures that, at any given point, the majority of players in the network operate in a desirable way.


Rather than imposing barriers to entry, permissionless blockchains are public and open for anyone to join. Since such networks can
 reasonably expect all kind of agents - including malicious actors - the key lies in incentivizing good behavior in a critical majority of the network, such that:


- The malicious actors cannot take over the network through an *escalated attack*.
- The malicious actors cannot *collude* to undertake an organized majority attack on the network.
- The *payoffs* of securing the network are consistently higher than the cost of attacking the network.
- The *cost* of attacking the network is prohibitively high.

You can find more about Cryptoeceonomics [[https://medium.com/@cryptoeconomics/the-blockchain-economy-a-beginners-guide-to-institutional-cryptoeconomics-64bf2f2beec4][here]].

*** Ethereum - An Alternative to Bitcoin


According to [[http://ethdocs.org/en/latest/introduction/what-is-ethereum.html][Ethereum's official documentation]],

#+BEGIN_QUOTE
"Ethereum is an open blockchain platform that lets anyone build and use *decentralized applications* that run on blockchain technology".
#+END_QUOTE


The Ethereum blockchain platform facilitates *scripting functionality*, or '*smart contracts*', which are run through the nodes in the network. As
 a result, unlike the Bitcoin blockchain, it does not just track transactions, it also programs them. Technically, Ethereum is a
 Turing-complete virtual machine with its native cryptocurrency called 'ether'. The platform was proposed in 2013 in a white paper by the then 19-year old Vitalik Buterin.

As of October 2017, Ethereum had a [[https://coinmarketcap.com/currencies/ethereum/][market cap]] of over $28 billion, making ether the second most valuable cryptocurrency after Bitcoin. 


 #+CAPTION: Ether Historical Market Capitalization Chart (Source: https://etherscan.io/chart/marketcap)
     #+NAME:   fig:Ether_Market_Cap
     [[file:img/Ether_Market_Cap.jpg]]


As the second best known public blockchain after the Bitcoin blockchain, Ethereum has ushered in an era of unprecedented activity around blockchain and distributed ledger technology.

In addition to the Ethereum public blockchain, there are numerous versions of Ethereum which are designed to be private and are permissioned.

*** Dapps

As [[https://www.youtube.com/watch?v%3DClw-qf1sUZg][Stephan Tual]] explains, Ethereum applications do not have a middleman; instead, users interact in a P2P fashion with other
 users through a variety of interfaces - social, financial, gaming, etc. Since the applications are developed on the decentralized consensus-based
 network itself, third-party censorship is virtually impossible. Malicious actors cannot secretly tamper with the application by changing the code
 and compromise all application users (or nodes that are actively interacting with it). These /Decentralized Applications/ have come to be known as *Dapps*.

Since they are cryptographically secured, Dapps are referred to as 'secure applications'. Some of the [[http://www.ethdocs.org/en/latest/introduction/web3.html][high profile Dapps]] built on the Ethereum platform include:


- *Augur*, which is a Decentralized Prediction Market. Learn more at https://augur.net/.
- *Digix*, which tokenizes gold on Ethereum. Learn more at: https://digix.global/.
- *Maker*, which is a Decentralized Autonomous Organization (DAO). Learn more at: https://makerdao.com/.

The Ethereum network is a distributed global public network, which means it is not run on central servers in a
 certain geographical location. Instead, the computing power that runs the network is contributed by nodes that are spread across the
 globe. In other words, Dapps have 'zero downtime' - they never go down and, in general, cannot be switched off.

*** Ethereum Smart Contracts

A hypothetical example of an Ethereum-based smart contract may involve the following transaction: in an equity raise, transfer amount
 X from the investor to the company upon receiving the given shares from the company. The monetary amount X, which
 was pre-validated by the company for the transaction (much like in a credit card purchase), is held in escrow
 by the smart contract, until the shares have been received by the investor. Any kind of arbitrary sophisticated business logic
 can be committed to the blockchain. The Ethereum blockchain only encodes these 'rules of the games'. The actual payoffs occur by interacting with the blockchain.

The illustration below describes this process. The smart contract encodes the agreement between the company raising funds and 
its investors (Panel 1). The smart contract sits on the Ethereum public blockchain, and is run on the Ethereum Virtual Machine (EVM). 
Once hitting a triggering event, like an expiration date or a strike price that has been pre-coded, the smart
 contract automatically executes as per the business logic (Panel 2). As an added benefit, regulators are able to scrutinize the
 market activity on an ongoing basis, without compromising the identity of specific players in a permissionless public blockchain, as Ethereum (Panel 3).


 #+CAPTION: Ethereum Smart Contracts
 #+NAME: fig: Ethereum_Smart_Contracts
 [[file:img/Ethereum_Smart_Contracts.png]]


*Note*: With the advent of the Ethereum blockchain platform and the scripting functionality or smart contracts that it enables, there
 are ongoing attempts to do the same for the Bitcoin blockchain, which does not allow for this, due to security
 reasons. [[http://www.rsk.co/][RSK]] is one such smart contract platform that seeks to achieve this "with a 2-way peg to Bitcoin". The added functionality can
 go a long way in making the Bitcoin blockchain useful for use cases other than cash transfers.

**  Exploring Permissionless Blockchains

*** Exploring Permissionless Blockchains

Let's start by examining the Bitcoin and Ethereum blockchains, both of which are permissionless, public blockchains. We will examine several
 large transactions, and the genesis block for each blockchain. We will look at block heights, transaction times, mining pools, timestamps, and block rewards.

** Consensus Algorithms

*Consensus* in the network refers to the process of achieving agreement among the network participants as to the correct state
 of data on the system. Consensus leads to all nodes sharing the exact same data. A *consensus algorithm*, hence, does
 two things: it ensures that the data on the ledger is the same for all the nodes in the network
, and, in turn, prevents malicious actors from manipulating the data. The consensus algorithm varies with different blockchain implementations.

While the Bitcoin blockchain uses Proof of Work as the consensus algorithm, other blockchains and distributed ledgers are deploying a
 variety of consensus algorithms, like the Proof of Stake, Proof of Burn, Proof of Capacity, Proof of Elapsed Time, and
 many others, depending on their unique requirements.

Next, we will briefly explain some of these algorithms.

** Proof of Work (PoW)

The Proof of Work consensus algorithm involves solving a computational challenging puzzle in order to create new blocks in the
 Bitcoin blockchain. Colloquially, the process is known as 'mining', and the nodes in the network that engage in mining are
 known as 'miners'. The incentive for mining transactions lies in economic payoffs, where competing miners are rewarded with 12.5
 bitcoins and a small transaction fee.

As described in the [[https://www.kudelskisecurity.com/sites/default/files/files/kudelski_Security_blockchain_20161213.pdf][2016 Kudelski Security report]],

#+BEGIN_QUOTE
"Proof-of-work (PoW) is the outcome of a successful mining process and, although the proof is hard to create, [it] is easy to verify."
#+END_QUOTE

For better understanding, please consider the following example provided by [[https://99bitcoins.com/proof-of-work-proof-of-stake/][Ofir Beigel]]:

#+BEGIN_QUOTE
"(...) guessing a combination to a lock is a proof to a challenge. It is very hard to produce this since
 you will need to guess many different combinations; but once produced, it is easy to validate. Just enter the combination and see if the lock opens".
#+END_QUOTE

Multiple criticisms exist for the PoW consensus algorithm. PoW requires a huge amount of energy to be expended, given the
 computationally heavy algorithm. In addition, PoW has a high latency of transaction validation, and the concentration of mining power is
 located in countries where electricity is cheap. In terms of the network security, PoW is susceptible to the '51% attack'
, which refers to an attack on a blockchain by a group of miners controlling more than 50% of the network's computing power.

** Proof of Stake (PoS)

The Proof of Stake algorithm is a generalization of the Proof of Work algorithm. In PoS, the nodes are known
 as the 'validators' and, rather than mining the blockchain, they validate the transactions to earn a transaction fee. There is
 no mining to be done, as all coins exist from day one. Simply put, nodes are randomly selected to validate
 blocks, and the probability of this random selection depends on the amount of stake held. So, if node X owns
 2 coins and node Y owns 1 coin, node X is twice as likely to be called upon to validate
 a block of transactions. The specific implementation of PoS can vary, depending on the use case, or as a matter
 of software design. Instances include [[https://www.linkedin.com/pulse/blockchain-consensus-algorithm-proof-of-work-satyakam-chakravarty/][Proof of Deposit]] and [[https://en.bitcoin.it/wiki/Proof_of_burn][Proof of Burn]]. The PoS algorithm saves expensive computational resources that
 are spent in mining under a PoW consensus regime.

** Proof of Elapsed Time (PoET)

Developed by Intel, the Proof of Elapsed Time consensus algorithm emulates the Bitcoin-style Proof of Work. Hyperledger's Sawtooth implementation
 is an example of PoET at work. Instead of competing to solve the cryptographic challenge and mine the next block
, as in the Bitcoin blockchain, the PoET consensus algorithm is a hybrid of a random lottery and first-come-first-serve basis. In PoET, each validator is given a random wait time.

#+BEGIN_QUOTE
"The validator with the shortest wait time for a particular transaction block is elected the leader."

- [[https://sawtooth.hyperledger.org/docs/core/releases/latest/introduction.html][sawtooth.hyperledger.org]]
#+END_QUOTE

This "leader" gets to create the next block on the chain.

** Simplified Byzantine Fault Tolerance (SBFT)

The Simplified Byzantine Fault Tolerant consensus algorithm implements an adopted version of the [[https://blog.acolyer.org/2015/05/18/practical-byzantine-fault-tolerance/][Practical Byzantine Fault Tolerant]] (PBFT) algorithm, and
 seeks to provide significant improvements over Bitcoin's Proof of Work consensus protocol. The basic idea involves a single validator who
 bundles proposed transactions and forms a new block. Note that, unlike the Bitcoin blockchain, the validator is a known party
, given the permissioned nature of the ledger. Consensus is achieved as a result of a minimum number of other nodes
 in the network ratifying the new block. In order to be tolerant of a Byzantine fault, the number of nodes
 that must reach consensus is 2f+1 in a system containing 3f+1 nodes, where f is the number of
 faults in the system. For example, if we have 7 nodes in the system, then 5 of those nodes must
 agree if 2 of the nodes are acting in a faulty manner.

The practical example would be that of [[http://hackingdistributed.com/2016/08/04/byzcoin/][ByzCoin]], which seeks to make key improvements over the original Bitcoin protocol. Addressing
 the challenge around scalability due to high latency, ByzCoin transactions are irreversibly committed to the blockchain within seconds. The added
 advantage is the communication trees to "(...) optimize transaction commitments and verification under normal operations." ([[https://www.kudelskisecurity.com/sites/default/files/files/kudelski_Security_blockchain_20161213.pdf][2016 Kudelski Security report]]).

** Proof of Authority (PoA)

Proof-of-Authority (PoA) is a consensus algorithm which can be used for permissioned ledgers. It uses a set of
 'authorities', which are designated nodes that are allowed to create new blocks and secure the ledger. Ledgers using PoA require
 sign-off by a majority of authorities in order for a block to be created.

** Comparing Permissioned Consensus Approaches and Standard PoW

[[https://www.hyperledger.org/wp-content/uploads/2017/08/HyperLedger_Arch_WG_Paper_1_Consensus.pdf][Consensus]] can be implemented in different ways, such as through the use of lottery-based algorithms (PoET or PoW), or
 through the use of voting-based methods (SBFT), each targeting different network requirements and fault tolerance models.

Lottery-based algorithms are advantageous in that they can scale to a large number of nodes. Voting-based algorithms provide low-latency finality.

The following table offers an at-a-glance view of the main considerations and pros and cons of different business blockchain approaches to reaching consensus.

|               | Permissioned Lottery-Based | Permissioned Voting-Based | Standard PoW (Bitcoin) |
|---------------+----------------------------+---------------------------+------------------------|
| *Speed*       | GOOD                       | GOOD                      | POOR                   |
| *Scalability* | GOOD                       | MODERATE                  | GOOD                   |
| *Finality*    | MODERATE                   | GOOD                      | POOR                   |
|---------------+----------------------------+---------------------------+------------------------|

** Hyperledger

Hyperledger is an open source effort created to advance cross-industry blockchain technologies. Hosted by The Linux Foundation, it is
 a global collaboration of members from various industries and organizations. Hyperledger boasts a host of enterprise-ready solutions. Hyperledger is
 about communities of software developers building blockchain frameworks and platforms. We will take a closer look at some of the
 current Hyperledger projects in the coming chapters.

*** Hyperledger Blockchains: Permissioned or Permissionless?

Hyperledger blockchains are generally permissioned blockchains, which means that the parties that join the network are authenticated and authorized to
 participate on the network. Hyperledger’s main goal is to create enterprise grade, open source, distributed ledger frameworks and code
 bases to support business use cases.

*** Advantages of Using a Permissioned Blockchain over a Permissionless Blockchain

If you look at permissionless blockchains, like the Bitcoin blockchain or the Ethereum blockchain, anyone can join the network, as
 well as write and read transactions. The actors in the system are not known, which means there could be some
 malicious actors within the network.

Hyperledger reduces these security risks and ensures that only the parties that want to transact are the ones that are
 part of the transaction and, rather than displaying the record of the transactions to the whole network, they remain visible
 only to the parties involved. So, Hyperledger provides all the capabilities of the blockchain architecture - data privacy, information sharing, immutability
, with a full stack of security protocols - all for the enterprise.


** Other Open Source Permissioned Distributed Ledgers

*** Chain Core

Chain Core is an enterprise permissioned blockchain system that is mostly focused on financial services, like currencies, securities, derivatives, gift
 cards, and loyalty points. The company partners with clients to launch and operate a network under the client's brand. Thanks
 to its strategic partnerships with companies such as Capital One, Citigroup, Fiserv, Nasdaq, Orange, Visa, etc., the company raised over $40 million in funding since 2014.

Within the Chain Core network, the creation and transfer of assets is decentralized. However, as stated in the [[https://www.kudelskisecurity.com/sites/default/files/files/kudelski_Security_blockchain_20161213.pdf][2016 Kudelski Security report]],


#+BEGIN_QUOTE
"the operation of the network is governed by a designated set of entities known as a federation".
#+END_QUOTE


The platform features the Chain Testnet, which allows decentralized application development on Chain Core, operated by Chain, Microsoft, and the Initiative for Cryptocurrencies and Contracts (IC3).

For more information, please refer to https://chain.com/technology/.

*** Corda

As of September 2017, R3 is a consortium of over one hundred large global financial institutions, that seeks to leverage
 distributed ledger technologies to record, manage, and automate legal agreements between businesses through its software solution, called Corda.

Corda is a distributed ledger platform, which features a blockchain-style P2P network; however, it is not a blockchain platform
. Unlike blockchains, which involve global availability of data across the network and third party validators, Corda only allows information access
 and validation functions to parties actually involved in the transaction. Featuring a different software architecture, "Corda achieves consensus between firms
 at the level of individual deals, not the level of the system" ([[http://www.r3cev.com/blog/2016/4/4/introducing-r3-corda-a-distributed-ledger-designed-for-financial-services][Richard Gendal Brown]], 2016), while supporting a variety of consensus mechanisms.

*** Quorum

Created by JPMorgan, Quorum is, in fact, a fork of the Ethereum public blockchain, which uses a voting-based consensus
 algorithm to facilitate an enterprise-focused distributed ledger and smart contract platform. Data privacy is achieved within the network by
 allowing data visibility on a need-to-know basis. The platform is designed to support "both transaction-level privacy and
 network-wide transparency" ([[https://www.jpmorgan.com/country/US/EN/Quorum][jpmorgan.com]]). The network validates all smart contracts and overall system state through the involvement of all
 running nodes. As with other permissioned ledgers, regulatory compliance is front and center in the Quorum platform.

*** IOTA

The cryptocurrency IOTA has been around since 2015. According to 
[[https://medium.com/@MartinRosulek/how-iota-makes-future-for-internet-of-things-af14fd77d2a3][Martin Rosulek]], "It is the first cryptocurrency
 that provides the whole ecosystem based on blockless blockchain" to enable machine-to-machine (M2M) transactions.

IOTA, however, is more than just a cryptocurrency. Essentially, the platform entails a generalization of the blockchain protocol (the technology
 called Tangle) that sits at the backend of the IOTA platform. 

Instead of paying miners to validate the transactions, the architecture of the network involves peer-based validation. We can think
 of a simple analogy, that of a teacher grading students' homework: the students are the clients/users in the Bitcoin
 protocol, and the teacher is the miner/validator. Tangle technology asks students (users) to grade each other's homework, making the
 need for a teacher (external validator) redundant, and avoiding expenses related to the teacher's/validator's work. This allows the platform
 to be completely free of cost, without facing the scaling challenges that are inherent in the first generation of blockchains.

Additionally, the use of the platform with connected devices or the Internet of Things


#+BEGIN_QUOTE
"enables companies to explore new business-to-business models by making every technological resource a potential service to be traded on an open market in real time, with no fees".

 - [[https://www.forbes.com/sites/rogeraitken/2017/06/15/iotas-bitfinex-listing-surges-to-1-5b-record-breaking-crypto-capitalization-on-market-debut/#7e4170e275a5][Roger Aitken]], 2017
#+END_QUOTE

** Challenges in the Adoption/Deployment of Distributed Ledger Technologies

There are a number of challenges to the widespread use of permissioned distributed ledger technologies. Key among them are challenges
 around the lack of standards, regulatory challenges, and the lack of knowledge about distributed ledger technologies. These challenges are inherent
 to any new technological infrastructure that replaces an older infrastructure.

We hope you go on to address some of these challenges and contribute to building a secure digital future!

*** Standards

Since we are still witnessing the early days of blockchain technology, there is no agreement on standards in the developer
 and business community, as of yet. Standards are key in ensuring interoperability and avoiding risks associated with a fragmented ecosystem
. Standards are critical not just for the distributed ledger itself, but also for supporting services, like identity, privacy, and data
 governance. Furthermore, the management of keys, as well as protocols and standards around key loss and theft, will be critical
 ([[https://www.bsigroup.com/PageFiles/508003/BSI_Blockchain_DLT_Web.pdf][Deshpande, Stewart, Lepetit, & Gunashekar]], 2017).


As a result, the International Organization for Standardization for Blockchain and Distributed Ledger Technologies was established in 2016 and has
 defined areas for future standardization work ([[https://www.iso.org/news/Ref2188.htm][Clare Naden]], 2017). More about the ISO/TC 307 technical committee can be found
 at https://www.iso.org/committee/6266604.html.



 #+CAPTION: Standards Role In Supporting Blockchain And DLT 
 #+NAME: fig: STANDARDS_ROLE_IN_SUPPORTING_BLOCKCHAIN_AND_DLT 
 [[file:img/STANDARDS_ROLE_IN_SUPPORTING_BLOCKCHAIN_AND_DLT.png]]

*** Regulation

The lack of regulation around transactions on the blockchain creates an environment of uncertainty for all players. Highly regulated industries
 like financial services are treading carefully in the DLT space. The Securities and Exchange Commission of the United States has
 recently clarified its stance ([[https://www.sec.gov/oiea/investor-alerts-and-bulletins/ib_coinofferings][sec.gov]]) on Initial Coin Offerings (ICOs). The Chinese government has, in fact, banned all ICOs
, while 60 major ICO platforms are being investigated ([[https://www.cnbc.com/2017/09/04/chinese-icos-china-bans-fundraising-through-initial-coin-offerings-report-says.html][Saheli Roy Choudhury]], 2017).

Similarly, there are no regulatory guidelines governing smart contracts, causing much anxiety among various players like lawyers, regulators, programmers, and
 businesses. The lack of regulatory guidelines, along with a lack of industry standards, exacerbates hindrances to rapid adoption of DLT.

*** Lack of Know-How

The lack of know-how (and know-whom and know-where) around distributed ledger technologies and the availability of experts
 in the area is a major challenge in the adoption of distributed ledger technologies. While there has been an exponential
 increase in the interest around 'blockchain', as indicated in the figure below, there is a huge lag of technical talent
 in the space. In fact, the origin of this course stems from the need to address this gap in know-how, both for the business and technical audiences.




#+CAPTION: Blockchain Search Volume
 #+NAME: fig:Blockchain_Search_Volume
 [[file:img/Blockchain_Search_Volume.jpg]]

Source: https://coin.dance/stats/blockchain Retrieved: October 9, 2017 (updated weekly)

** Conclusion 

For a new technology to realize its full potential, a lot of pieces need to exist before network effects can
 be realized. Moreover, in order for the technology to bring in systemic efficiencies, a critical mass needs to be attained
. As an infrastructure technology, all major players in the market need to collaborate to define standards in a democratic manner
. The blockchain community is indeed witnessing unprecedented levels of industry collaboration between players who are otherwise competitors in the space
. Because of the cost of moving from one infrastructure technology to the next, an open source collaborative approach is the
 most promising way forward. As you will learn in Chapter 2, Introduction to Hyperledger, Hyperledger's mandate is to develop and
 nurture this ecosystem to develop the future of business blockchain technologies.


* Chapter 2. Introduction to Hyperledger

** Introduction 

This chapter provides an overview of Hyperledger, a collaborative project hosted by The Linux Foundation that is focused on business
 blockchain technologies. It also introduces the current Hyperledger frameworks and modules, as of October 2017.

By the end of this chapter you should be able to:

- Explain the differences between Hyperledger and permisionless blockchain technologies.
- Discuss how Hyperledger leverages open standards and open governance to support business solutions.
- Discuss Hyperledger frameworks (Iroha, Sawtooth, Fabric, Indy, and Burrow) and modules (Cello, Explorer, and Composer).


** Hyperledger


*** Hyperledger

Hyperledger is a group of open source projects focused around cross-industry distributed ledger technologies. Hosted by The Linux Foundation
, collaborators include industry leaders in technology, finance, banking, supply chain management, manufacturing, and IoT.

As of October 2017, Hyperledger consists of eight projects, five of which are distributed ledger frameworks. The other three projects
 are modules that support these frameworks.

#+CAPTION: Hyperledger Modular Umbrella Approach 
#+NAME: fig:modular_umbrella
[[file:img/modular_umbrella.jpg]]

As [[https://www.hyperledger.org/blog/2017/09/12/3431][Arnaud Le Hors]], member of the Hyperledger Technical Steering Committee, emphasized,

#+BEGIN_QUOTE
"these projects show how broadly applicable blockchain technology really is. This goes way beyond cryptocurrencies".
#+END_QUOTE


[[https://www.hyperledger.org/about][Hyperledger]] provides an alternative to the cryptocurrency-based blockchain model, and focuses on developing blockchain frameworks and modules to support
 global enterprise solutions. The focus of Hyperledger is to provide a transparent and collaborative approach to blockchain development.

*** Comparing Hyperledger with Bitcoin and Ethereum

The following table explores the differences between Hyperledger's permissioned distributed ledgers and the Bitcoin and Ethereum permissionless blockchains. If you
 are considering blockchain solutions for your business requirements, it is important to pay attention to all these elements and weigh
 in on those that are most important for your use case.

|                      | Bitcoin | Ethereum | Hyperledger Frameworks |
| Cryptocurrency based | Yes     | Yes      | No                     |
| Permissioned         | No      | No       | Yes(in general)*       |
| Pseudo-anonymous     | Yes     | No       | No                     |
| Auditable            | Yes     | Yes      | Yes                    |
| Immutable ledger     | Yes     | Yes      | Yes                    |
| Modularity           | No      | No       | Yes                    |
| Smart contracts      | No      | Yes      | Yes                    |
| Consensus protocol   | PoW     | PoW      | Various**              |

*Sawtooth can be configured to be permissionless
**Key Hyperledger consensus protocols are Apache Kafka in Hyperledger Fabric, PoET in Hyperledger Sawtooth, RBFT in Hyperledger Indy, Tendermint in
 Hyperledger Burrow, and Yet Another Consensus (YAC) in Hyperledger Iroha. For more details, see the [[https://www.hyperledger.org/wp-content/uploads/2017/08/HyperLedger_Arch_WG_Paper_1_Consensus.pdf][Hyperledger Architecture, Volume 1 paper]].

*** Hyperledger Goals

Hyperledger has taken a leadership role to develop cross-industry standards and provide a neutral space for software collaboration. The
 financial services industry, in particular, is witnessing an unprecedented level of collaboration between institutions that have traditionally been competitors. The
 advent of a new foundational or infrastructural technology like the blockchain - much like the Internet - requires collaboration of various actors
 in order to realize the full benefits of the technology. Unless all actors use a certain standard, the pace of
 technological dissemination will continue to be slow. Technological adoption is characterized by network effects, where the costs decrease with the
 increase in use of a certain technology. Since shifting to distributed ledger technology involves significant costs, open source software, communities
 and ecosystems that develop around these have a significant part to play.

#+CAPTION: Hyperledger Goals
#+NAME: fig:Hyperledger_Goals
[[file:img/Hyperledger_Goals.jpg]]

*** Open Standards

#+BEGIN_QUOTE
"Only an Open Source, collaborative software development approach can ensure the transparency, longevity, interoperability and support required to bring blockchain
 technologies forward to mainstream commercial adoption. That is what Hyperledger is about - communities of software developers building blockchain frameworks and platforms."


- [[hyperledger.org%20][hyperledger.org ]]
#+END_QUOTE


As we learned in Chapter 1: Discovering Blockchain Technologies, the non-availability of standards in distributed ledger technologies is one
 of the major hurdles in scaling them. One of Hyperledger's key goals is to facilitate the process of standards formation
, not by promoting its own distributed ledger(s), but by providing a space for a variety of standards to co-exist simultaneously:

#+BEGIN_QUOTE
"Rather than declaring a single blockchain standard, it encourages a collaborative approach to developing blockchain technologies via a community process
, with intellectual property rights that encourage open development and the adoption of key standards over time."


- [[https://hyperledger-fabric.readthedocs.io/en/latest/][hyperledger-fabric.readthedocs.io ]]
#+END_QUOTE

Hyperledger aims to adhere to '*open standards*', which means they are

#+BEGIN_QUOTE
"(...) interoperable through open published interfaces and services."


-  John Palfreyman, [[https://www.ibm.com/blogs/insights-on-business/government/open-innovation-blockchain-hyperledger/][ibm.com]]
#+END_QUOTE

*** Open Source and Open Governance

#+BEGIN_QUOTE
"Today, most people understand the concept of *Open Source*. What many people don't get, and something we here at Hyperledger and The Linux Foundation pride ourselves on doing well, is *Open Governance*."

- [[https://hyperledger.org/blog/2017/09/06/abcs-of-open-governance][hyperledger.org]]
#+END_QUOTE

Open source software is software that is made freely available and may be redistributed and modified. In other words, anyone
 has the ability to view the code, use the code, copy the code, change the code, and, depending on the open source license, contribute back changes.

Open governance means that technical decisions for an open source project are made by a group of community-elected developers
 drawn from a pool of active participants. These decisions include things such as which features to add, how, and when to add them.

Learn more about the specifics of Hyperledger's open governance at https://hyperledger.org/blog/2017/09/06/abcs-of-open-governance.

*** Blockchain for Business

The cryptocurrency-based blockchain model, popularized by public blockchains like Bitcoin and Ethereum, currently falls short of fulfilling a host
 of requirements that many types of organizations would have to fulfill in order to be compliant when using blockchain and
 distributed ledger technologies - for instance, in the areas of financial services, healthcare, and government.

Hyperledger is a unique platform that is developing permissioned distributed ledger frameworks specifically designed for enterprises, including those in industries
 with strong compliance requirements. Enterprise use cases require capabilities such as scalability and throughput, built-in or interoperable identity modules
 for the parties involved in a transaction or a network, or even access to regulators who can access all data
 in the ledger as read-only to ensure compliance. The latter is particularly important because, regardless of the innovation, it
 has to operate within the current regulatory framework, as well as comply with any new rules that come into place specifically targeted at blockchain technologies.

The enterprise continues to be at the heart of this course.

** Hyperledger Frameworks 


*** Components of Hyperledger Frameworks

Hyperledger business blockchain frameworks are used to build enterprise blockchains for a consortium of organizations. They are different than public
 ledgers like the Bitcoin blockchain and Ethereum. The Hyperledger frameworks include:


- An append-only distributed *ledger*
- A *consensus algorithm* for agreeing to changes in the ledger
- *Privacy* of transactions through permissioned access
- *Smart contracts* to process transaction requests.

#+CAPTION: Components of blockchain
#+NAME: fig:Components_of_blockchain
[[file:img/Components_of_blockchain.jpg]]

Now, let's explore the five Hyperledger frameworks (as of October 2017)!

*** Hyperledger Iroha v0.95

[[https://hyperledger.org/projects/iroha][Hyperledger Iroha]] is a blockchain framework contributed by Soramitsu, Hitachi, NTT Data, and Colu. Hyperledger Iroha is designed to be
 simple and easy to incorporate into infrastructure projects requiring distributed ledger technology. Hyperledger Iroha emphasizes mobile application development with client
 libraries for Android and iOS, making it distinct from other Hyperledger frameworks. Inspired by Hyperledger Fabric, Hyperledger Iroha seeks to
 complement Hyperledger Fabric and Hyperledger Sawtooth, while providing a development environment for C++ developers to contribute to Hyperledger.

In conclusion, Hyperledger Iroha features a simple construction, modern, domain-driven C++ design, along with the consensus algorithm [[https://www.overleaf.com/read/wzhwjzbjvrzn#/40115559/][YAC]].

*** Hyperledger Sawtooth v0.8
[[https://www.hyperledger.org/projects/sawtooth][Hyperledger Sawtooth]], contributed by Intel, is a blockchain framework that utilizes a modular platform for building, deploying, and running distributed
 ledgers. Distributed ledger solutions built with Hyperledger Sawtooth can utilize various consensus algorithms based on the size of the network
. By default, it uses the Proof of Elapsed Time (PoET) consensus algorithm, which provides the scalability of the Bitcoin blockchain
 without the high energy consumption. PoET allows for a highly scalable network of validator nodes. Hyperledger Sawtooth is designed for
 versatility, with support for both permissioned and permissionless deployments.

*** Hyperledger Fabric v1.0

[[https://www.hyperledger.org/projects/fabric][Hyperledger Fabric]] was the first proposal for a codebase, combining previous work done by Digital Asset Holdings, Blockstream's libconsensus, and
 IBM's OpenBlockchain. Hyperledger Fabric provides a modular architecture, which allows components such as consensus and membership services to be plug
-and-play. Hyperledger Fabric is revolutionary in allowing entities to conduct confidential transactions without passing information through a central authority
. This is accomplished through different channels that run within the network, as well as the division of labor that characterizes
 the different nodes within the network. Lastly, it is important to remember that, unlike Bitcoin, which is a public chain
, Hyperledger Fabric supports permissioned deployments.

#+BEGIN_QUOTE
"If you have a large blockchain network and you want to share data with only certain parties, you can create a private channel with just those participants. It is the most distinctive thing about Fabric right now."


- Brian Behlendorf, Executive Director of Hyperledger, The Linux Foundation
#+END_QUOTE

*** Hyperledger Indy

[[https://www.hyperledger.org/projects][Hyperledger Indy]] is a distributed ledger purpose-built for decentralized identity. Hyperledger Indy's goal is to achieve this by developing a set of

"(...) decentralized identity specs and artifacts that are independent of any particular ledger and will enable interoperability across any DLT that supports them."

Contributed by the Sovrin Foundation, Hyperledger Indy allows individuals to manage and control their digital identities. Rather than having businesses
 store huge amounts of personal data of individuals, Hyperledger Indy allows businesses to store pointers to identity. Once the company
 verifies the other party's identity, it throws it away.

According to Brian Behlendorf,

#+BEGIN_QUOTE
"(...) identity is a toxic asset that could present a liability to organizations."
#+END_QUOTE

Indeed, since 2013, over 9 billion data records were lost or stolen. What is striking is that, out of these
, only 4% were encrypted, and hence, rendered useless after being stolen (also called 'secure breaches'). You can find detailed statistics
 at http://breachlevelindex.com/.


One of the key principles of Hyperledger Indy is its '[[https://en.wikipedia.org/wiki/Privacy_by_design][Privacy by Design']] approach. Given the immutable nature of the
 DLT, it is all the more important that digital identities be handled with the utmost care, keeping human values front and center.

#+BEGIN_QUOTE
"Hyperledger Indy lets users authenticate identity based on the attributes they are willing to store and share themselves. This can
 reduce the amount of liability contained within a business because the data can be kept with the user and presented
 to you again in a way that you can trust and validate that what has been said really was said
 and is trusted by the other parties you do business with."


- Nathan George, Maintainer, Hyperledger Indy
#+END_QUOTE

Further information about the history of the project can be found at https://sovrin.org/.
*** Hyperledger Burrow v0.16.1

Formally known as eris-db, [[https://www.hyperledger.org/projects/hyperledger-burrow][Hyperledger Burrow]] was released in December 2014. Currently under incubation, Hyperledger Burrow is a permissionable
 smart contract machine that provides a modular blockchain client with a permissioned smart contract interpreter built- in part to the
 specification of the Ethereum Virtual Machine (EVM). It is the only available Apache-licensed EVM implementation.

Following are the major components of Burrow:

- The *Gateway* provides interfaces for systems integration and user interfaces
- The *Smart contract application engine* facilitates integration of complex business logic
- The *Consensus Engine* serves the dual purpose of:
  - a. Maintaining the networking stack between the nodes, and,
  - b. Ordering transactions
- The Application Blockchain Interface (ABCI) provides interface specification for the consensus engine and smart contract application engine to connect.

You can learn more about Hyperledger Burrow at https://monax.io/platform/db/.
** Hyperledger Modules
*** Hyperledger Modules
The Hyperledger frameworks which we examined in the previous section are used to build blockchains and distributed ledgers. The Hyperledger
 modules, which we will look at next, are auxiliary softwares used for things like deploying and maintaining blockchains, examining the
 data on the ledgers, as well as tools to design, prototype, and extend blockchain networks.
*** Hyperledger Cello

For businesses that want to deploy Blockchain-as-a-Service, [[https://www.hyperledger.org/projects/cello][Hyperledger Cello]] provides a toolkit that fulfills this need. Particularly
 for lean businesses and small enterprises, who want to reduce or eliminate the effort required in creating, managing, and terminating
 blockchains, Hyperledger Cello allows blockchains deployment to the cloud. Operators can create and manage such blockchains through a dashboard, and
 users (typically, chaincode developers) can obtain a blockchain instance immediately.

As a Hyperledger module, "Cello aims to bring the on-demand 'as-a-service' deployment model to the blockchain ecosystem
", thus helping in furthering the development and deployment of Hyperledger's frameworks. Hyperledger Cello was initially contributed by IBM, with sponsors
 from Soramitsu, Huawei, and Intel.

Application developers and system administrators using Cello can provision and maintain Hyperledger networks. For instance, you can create a group
 of distributed ledger networks in virtual clouds known as 'container clusters', and then, manage and monitor those networks with a
 configurable dashboard. Additionally, you can build a Blockchain-as-a-Service (BaaS) platform.


#+CAPTION: Hyperledger Cello (Source: https://www.hyperledger.org/blog/2017/01/17/hyperledger-says-hello-to-cello)
#+NAME: fig:cello
[[file:img/cello.jpg]]

*** Hyperledger Explorer

[[https://www.hyperledger.org/projects/explorer][Hyperledger Explorer]] is a tool for visualizing blockchain operations. It is the first ever blockchain explorer for permissioned ledgers, allowing
 anyone to explore the distributed ledger projects being created by Hyperledger's members from the inside, without compromising their privacy. The
 project was contributed by DTCC, Intel, and IBM.

Designed to create a user-friendly web application, Hyperledger Explorer can view, invoke, deploy, or query:

- Blocks
- Transactions and associated data
- Network information (name, status, list of nodes)
- Smart contracts (chain codes and transaction families)
- Other relevant information stored in the ledger.

The ability to visualize data is of critical importance, in order to extract business value from it. Hyperledger Explorer provides
 this much needed functionality. Key components include a web server, a web UI, web sockets, a database, a security repository, and a blockchain implementation.

*** Hyperledger Composer

[[https://www.hyperledger.org/projects/composer][Hyperledger Composer]] provides a suite of tools for building blockchain business networks. These tools allow you to:


- Model your business blockchain network
- Generate REST APIs for interacting with your blockchain network
- Generate a skeleton Angular application.

Built in Javascript, Hyperledger Composer provides an easy-to-use set of components that developers can quickly learn and implement. 
The project was contributed by Oxchains and IBM.

Hyperledger Composer has created a modelling language that allows you to define the assets, participants, and transactions that make up
 your business network using business vocabulary. In addition, the transaction logic is then written by developers using Javascript. This simple
 interface allows business people and technologists to work together on defining their business network.

The [[https://www.hyperledger.org/wp-content/uploads/2017/05/Hyperledger-Composer-Overview.pdf][benefits]] of Hyperledger Composer are:

- Faster creation of blockchain applications, eliminating the massive effort required to build blockchain applications from scratch
- Reduced risk with well-tested, efficient design that aligns understanding across business and technical analysts
- Greater flexibility as the higher-level abstractions make it far simpler to iterate.

You can watch an introduction to Hyperledger Composer [[https://www.youtube.com/watch?v%3DcNvOQp8r0xo][here]].


* Chapter 3. The Promise of Business Blockchain Technologies

** Introduction 

This chapter is designed to help people evaluate whether blockchain tech, including the Hyperledger frameworks, are right for their business.

By the end of this chapter you should be able to:

- Examine several use cases where blockchain technology is actively used to solve real world business problems.
- Discover the factors to look at when evaluating if blockchain technology is right for a particular project.
- Decide when to use and when not to use blockchain technology.

**  Existing Blockchain Use Cases 



*** Business Blockchain Technologies Overview

Blockchain is a new data structure with an automated way to enforce trust among participants. Consensus algorithms ensure that all
 participants agree on the data stored within the blockchain. Blockchain opens the door to disrupt any industry that relies on
 a central authority to confirm authenticity. It also allows independent, and even competing organizations, to share information to gain efficiencies
 across an industry.

In permissioned blockchains, a consortium of organizations are responsible for authenticating and controlling the participants in a blockchain. In public
 blockchains, no central authority or administration is required to exchange data. Blockchains can drive business innovation through controlled data-sharing
 networks for industry consortiums.

The promise of distributed ledger technologies (DLT) to simplify and automate key work functions has many industries taking notice. Businesses
 recognize the efficiency gains from transitioning from closed and proprietary solutions to standard open source capabilities, such as Hyperledger business
 blockchain technologies. Several common project features of blockchain applications are taking shape as the technology matures.

How exactly are businesses using these emerging technologies today? Next, we will explore the state of distributed ledger technologies in
 actual corporate settings, and how they compare against traditional tools.

*** Supply Chain Management (Part I)

Supply chain management is an important piece of enterprise resource planning (ERP). Supply chain management is the oversight of funds
, raw materials, components, and finished products, as they move from suppliers, to manufacturers, to wholesalers, to retailers, to consumers. This
 movement can occur both within one company, or among several companies. As assumptions change over time, the supply chain models
 can begin to show weak performance metrics. Good supply chain management will keep product quality consistent, and also prevent either
 understocking or overstocking of inventory.

Stocking the right amount of inventory over time is also known as supply demand synchronization, and is the key component
 in just-in-time lean manufacturing and distribution. Companies want to ensure that products are available when needed, but overstocking
 inventory is costly. Companies that overstock perishable goods must discard items. Companies that overstock non-perishable goods cannot use the
 money paid for those goods for other purposes until the inventory is used. Furthermore, if the price of a good
 drops while a company is storing excess inventory, then the company will lose money.

Currently, there are weak points in the supply chain management. These weak points occur where there are multiple ERP systems
 in use across organizations. Data doesn't flow well through the handshakes or interface points between systems. These weak points usually
 happen during transference of ownership, or change in status between two parties. Visibility is limited at the hand-off points
 of funds, raw materials, components, or finished products. This lack of transparency is often intentional, as companies don't want to
 expose their competitive advantages (e.g., an inexpensive supplier who delivers quality products on time). Additionally, a company could be
 cut out of a supply chain if members start transacting directly with that company’s suppliers.

*** Supply Chain Management (Part II)

Blockchains are currently being used to solve problems in supply chain management by eliminating the need for a trusted third
 party to certify raw materials, components, or finished products, as they travel through a supply chain. Every participant, or node
, contains a copy of all transactions. This provides an audit trail of every transaction that has occurred in the system
. A change would be validated or rejected by the nodes in the system. Because all participants have a copy of
 all past transactions in the network, any participant can detect if a product is not as advertised. Instead of examining
 raw materials, components, or finished products at several points in the supply chain, a record of the inspection would be
 available and bound to the item as it flows through the supply chain. Although a record of the transaction is
 public and tied to the movement of physical items across the network, specifics such as the quantity of goods, or
 the identity of the parties transacting, can be done pseudo-anonymously in a blockchain. Such a granular view of movement
 through supply chains improves resource allocation.








**  When to Use or Not to Use Blockchain Technologies 
*** What Enterprises Look for When Evaluating Whether or Not to Use Hyperledger

Start with the business needs trying to look at what are you doing in your enterprise, with your business partners,
your suppliers, your customers, your competitors.

What are some _business processes_, or some _provenance tracking problems_ or a _registry_ somewhere that you know you're 
putting too much trust in a central org somewhere.

Where is there an opportunity to take a decentralized ledger appropach and a smart contract approach to solving 
those issues? 

#+BEGIN_QUOTE
*Start with the need*
#+END_QUOTE


One way to explore that is by using the industry consortium in that industry talking about technical standards,
common business processes and _those are often the right kind of organizations to look at doing a proof of concept with_.
Because they often have kind of this global point of view of the industry and they tend to be trusted by the participants in that industry. 
So often, they could come up with what's right kind of proof of concept, or maybe even a Minimum Viable Product kind of project.

You really need to think about an industry-wide kind of approach even from the earliest day.
Once you've identified like that kind of opportunity, you should start to ask yourself what are the characteristics of the need.

Is it from atransaction rate perspective, from a number of nodes, from a geographically distrubuted those nodes might be. 
And then, also ask yourself who are the developers that I'm expecting to tap to bring this technology to bear and have they started 
to investigate DLT. Have they started to learn how Fabric works, how Sawtooth works.

#+BEGIN_QUOTE
As your business side of the house is trying to understand the use cases, you should really let your technology teams explore this technlology.
#+END_QUOTE

Allow them to get their hands dirty, to go to a hackathon, to take this course, to start playing with these technologies to get 
a more intuitive sense for what they do and what they can't do, what their limitations might be. 


This is still very early days and you should still need to be smart about how do we apply these and how do we use them. 

At some point, those two teams should meet up and say "Here is what I think is really the 
MVP (Minimum Viable Product) or a proof of concept. And the other team say "Okay, we understand how to build this, 
we can do something in a week". 

And let's just see that, cheap and dirty, what it looks like. And then, over time, start to promulgate that amongst 
the other partners that you think you'd involved in a distributed ledger project.
*** When to Use Blockchain

There are certain factors to consider when evaluating blockchain distributed ledger technology for your business. How many participants are in
 your system? What is the geographical distribution of the participants? What sort of performance requirements do you have? Defining the
 rules, risks, and responsibilities of each party in your blockchain system is useful as you consider transferring a database to
 a decentralized environment such as one of the Hyperledger frameworks. Blockchain is best suited for business applications where one or
 more of the following conditions apply:


- There is a need for a shared common database
- The parties involved with the process have conflicting incentives, or do not have trust among participants
- There are multiple parties involved or writers to a database
- There are currently trusted third parties involved in the process that facilitate interactions between multiple parties who must trust the third party. This could include escrow services, data feed providers, licensing authorities, or a notary public
- Cryptography is currently being used or should be used. Cryptography facilitates data confidentiality, data integrity, authentication, and non-repudiation
- Data for a business process is being entered into many different databases along the lifecycle of the process. It is important that this data is consistent across all entities, and/or digitization of such a process is desired
- There are uniform rules governing participants in the system
- Decision making of the parties is transparent, rather than confidential
- There is a need for an objective, immutable history or log of facts for parties’ reference
- Transaction frequency does not exceed 10,000 transactions per second.
*** When Not to Use Blockchain

Blockchain technology is a powerful tool, but it is not always the right tool for the job at hand. If
 you are contemplating using blockchain technology, be sure to evaluate the problem fully. The following conditions are not currently well
 suited to blockchain-based solutions:


- The process involves confidential data
- The process stores a lot of static data, or the data is quite large
- Rules of transactions change frequently
- The use of external services to gather/store data

Next, we will discuss in more detail the conditions that are not well suited to blockchain-based solutions. 

**** The Process Involves Confidential Data

The biggest advantage and challenge in deploying blockchains is the radical transparency which they provide. Methods are being developed to
 hide confidential data on the blockchain, while sharing it only to relevant parties. Regulations for data privacy often do not
 allow for blockchain solutions. A thorough review of the relevant privacy rules governing your business case should be examined to
 see whether blockchain is appropriate. For example, is leaking data in encrypted form allowed? What level of encryption is required
 when transmitting data?

**** The Process Stores a Lot of Static Data/Data Is Quite Large

With blockchain technology, the entire database is stored across many nodes in a blockchain system. Because the replication factor of
 these systems is so high, they are best suited to databases that have many state changes, or store only the
 minimum necessary amount of information. If the data is relatively static, or if the files to be stored are quite
 large, a different technical solution may be more appropriate.

**** Rules of Transactions Change Frequently

If the rules around how your business processes are conducted change frequently, or change in unexpected ways, then blockchain may
 not be well suited for your use case. The rules of transactions in blockchain are often pre-set, and smart
 contracts do not change execution paths once they have been initiated. Everything that takes place on a blockchain must be
 completely deterministic. Additionally, blockchains are append-only databases. A relational database may be more suitable if you need to make
 many changes to your data as the rules of your transactions change.

**** The Use of External Services to Gather/Store Data

A blockchain smart contract does not currently initiate the retrieval of external data. Instead, one or more trusted parties ('oracles'
) must create a transaction which embeds that data in the chain. This data is often gathered and stored in a
 traditional database by the oracle. Any interaction between a blockchain and the outside world is restricted to regular database operations.

In other words, an oracle pushes data onto the blockchain, rather than a smart contract pulling it in. Once the
 oracle pushes the data, every node will have an identical copy of this data. This allows for the data to
 be safely used in a smart contract computation. While oracles allow for blockchain interface with external data, they undermine the
 goal of a decentralized system. Examine when such a trusted authority should be retained. When the trusted authority would or
 should be retained, efficiencies in the blockchain are not as high as in other applications.

**** Simpler Alternatives

For some applications, other options are simply more efficient. When evaluating blockchain technology, consider whether regular file storage, a centralized
 database, or database replication with master/slave relationship between the original and copies is suitable. If those structures are suitable
, then you can deploy your application with reduced complexity. Do you need a smart contract or are stored procedures written
 in an extension of SQL sufficient? Similarly, some applications can simply utilize cryptographic methods common in blockchains, without the database
 replication mechanisms of a blockchain.

*** Blockchain Decision Path

The following diagram provides generalized, high-level decision points about when to use or not to use blockchain technology for your business.

#+CAPTION: Blockchain Decision Flowchart
#+NAME: fig:Blockchain_Decision_Flowchart
[[file:img/Blockchain_Decision_Flowchart.png]]

** Conclusion 

You should now be able to:

- Examine several use cases where blockchain technology is actively used to solve real world business problems.
- Discover the factors to look at when evaluating if blockchain technology is right for a particular project.
- Decide when to use and when not to use blockchain technology.


A number of business problems are being tackled with blockchain technology. It will be interesting to see what emerges as
 Hyperledger continues to develop DLT and the tooling around it. By examining the factors outlined in this chapter, you can
 evaluate the use of blockchain technology for your particular project.

* Chapter 4. Introduction to Hyperledger Iroha


** Introduction & Learning Objectives
By the end of this chapter you should be able to:

- Understand the basics of Hyperledger Iroha v0.95.
- Discuss crucial components of the Hyperledger Iroha architecture, including the consensus algorithm YAC (Yet Another Consensus), peers, clients and the ledger block storage Ametsuchi.
- Join the Hyperledger Iroha framework discussion and development.


** Key Components

*** Hyperledger Iroha

Hyperledger Iroha is a blockchain framework, and one of the Hyperledger projects hosted by The Linux Foundation. Hyperledger Iroha was
 initially contributed by Soramitsu, Hitachi, NTT Data, and Colu. Hyperledger Iroha is designed to be simple and easy to incorporate
 into infrastructure projects requiring distributed ledger technology. Hyperledger Iroha features a simple construction, modern, domain-driven C++ design, emphasis on
 mobile application development, and the YAC consensus algorithm.

*** Architecture Overview
Before diving into the key components of Hyperledger Iroha, it is important to get an overarching look at this framework
. The diagram below shows a layered architectural view of the different components that make up Hyperledger Iroha. The four layers
 are: API, Peer Interaction, Chain Business Logic, and Storage.


#+CAPTION: Iroha Architecture
#+NAME: fig:Iroha-architecture
[[file:img/Iroha-architecture.png]]

The components are:

- *Model* classes are system entities.
- *Torii* (gate) provides the input and output interfaces for clients. It is a single [[https://grpc.io/][gRPC]] server that is used by clients to interact with peers through the network. The client's RPC call is non-blocking, making Torii an asynchronous server. Both commands (transactions) and queries (read access) are performed through this interface.
- *Network* encompasses interaction with the network of peers.
- *Consensus* is in charge of peers agreeing on chain content in the network. The consensus mechanism used by Iroha is YAC (Yet Another Consensus), which is a practical byzantine fault-tolerant algorithm based on voting for block hash.
- *Simulator* generates a temporary snapshot of storage to validate transactions by executing them against this snapshot and forming a verified proposal, which consists only of valid transactions.
- *Validator* classes check business rules and validity (correct format) of transactions or queries. There are two distinct types of validation that occur in Hyperledger Iroha:
  - *Stateless validation* is a quicker form of validation, that performs schema and signature checks of the transaction.
  - *Stateful validation* is a slower form of validation, that checks the permissions and the current world state view, which is the latest and most actual state of the chain, to see if desired business rules and policies are possible. For example, does an account have enough funds to transfer?
- *Synchronizer* helps to synchronize new peers in the system or temporarily disconnected peers.
- *Ametsuchi* is the ledger block storage which consists of a block index (currently Redis), block store (currently flat files), and a world state view component (currently PostgreSQL).

*** Participants within the Network

There are three main participants within a Hyperledger Iroha network:

- *Clients* are able to:
  a. Query data that they have access/permission to
  b. Perform a state-changing action, 'transaction', which consists of atomic operations, called 'commands'. For example, in a single transaction, a user can transfer funds to three people (three separate commands). But, if he/she does not have enough funds to cover for all, the whole transaction will be rejected.
- *Peers* maintain the current state and their own copy of the shared ledger. A peer is a single entity in the network, and has an address, identity, and trust. Hyperledger Iroha is designed so that a single peer may be a single computer or scaled for a cluster, meaning different computers are used for ledger storage, indices, validation, and peer-to-peer logic.
- *Ordering service* orders transactions into a known order. There are a few options for the algorithm used by the ordering service. Kafka is considered a good candidate. It is important to mention that if Kafka, or any other distributed solution is used, that it be clustered; otherwise, this will result in a single point of failure.

*** Transaction Flow Basics (Part I)

*Step 1*: A client creates and sends a transaction to the Torii gate, which routes the transaction to a peer that is responsible for performing stateless validation.

#+NAME: fig:Step_1_of_Iroha_Transaction_Flow
[[file:img/Step_1_of_Iroha_Transaction_Flow.png]]

*Step 2*: After the peer performs stateless validation, the transaction is first sent to the ordering gate, which is responsible for choosing the right strategy of connection to the ordering service.
#+NAME: fig:Step_2_of_Iroha_Transaction_Flow
[[file:img/Step_2_of_Iroha_Transaction_Flow.png]]


*Step 3*: The ordering service puts transactions into order and forwards them to peers in the consensus network in the
 form of proposals. A proposal is an unsigned block shared by the ordering service, that contains a batch of ordered
 transactions. Proposals are only forwarded when the ordering service has accumulated enough transactions, or a certain amount of time has
 elapsed since the last proposal. This prevents the ordering service from sending empty proposals.

#+NAME: fig:Step_3_of_Iroha_Transaction_Flow
[[file:img/Step_3_of_Iroha_Transaction_Flow.png]]

*** Transaction Flow Basics (Part II)

*Step 4*: Each peer verifies the proposal’s contents (stateful validation) in the Simulator and creates a block which consists
 only of verified transactions. This block is then sent to the consensus gate which performs YAC consensus logic.


#+NAME: fig:Step_4_of_Iroha_transaction_flow
[[file:img/Step_4_of_Iroha_transaction_flow.png]]

*Step 5*: An ordered list of peers is determined, and a leader is elected based on the YAC consensus logic. Each peer
 casts a vote by signing and sending their proposed block to the leader.

#+NAME: fig:Step_5_of_Iroha_transaction_flow
[[file:img/Step_5_of_Iroha_transaction_flow.png]]

*Step 6*: If the leader receives enough signed proposed blocks (i.e. more than two thirds of the peers), then
 it starts to send a commit message, indicating that this block should be applied to the chain of each peer
 participating in the consensus. Once the commit message has been sent, the proposed block becomes the next block in the
 chain of every peer via the synchronizer.

#+NAME: fig:Step_6_of_Iroha_Transaction_flow
[[file:img/Step_6_of_Iroha_Transaction_flow.png]]

*** YAC (Yet Another Consensus) - Consensus Functions

Hyperledger Iroha currently implements a consensus algorithm called *YAC* (Yet Another Consensus), which is based on voting for block hash
. Consensus involves taking blocks after they have been validated, collaborating with other blocks to decide on commit, and propagating commits
 between peers. The YAC consensus performs two functions: ordering and consensus.

Ordering is responsible for ordering all transactions, packaging them
 into proposals, and sending them to peers in the network. The ordering service is an endpoint for setting an order
 of transactions and their broadcast (in a form of proposal). Ordering is not responsible for performing stateful validation of transactions
.

*Note*: Currently, the ordering service is a single point of failure that does the ordering, and, therefore, Hyperledger Iroha is
 neither crash fault-tolerant, nor byzantine fault-tolerant.

Consensus is responsible for agreement on blocks based on the same proposal.

Validation is an important part of the transaction flow, however it is separate from the consensus process.


*** YAC - Steps to Successful Consensus

- *Step 1*: The ordering service shares a proposal to all peers. A *proposal* is an unsigned block created and shared to peers in the network by the ordering service. It contains a batch of ordered transactions.

- *Step 2*: Peers calculate the hash of a verified proposal and sign it. The resulting *<Hash, Signature>* tuple is called a vote.

- *Step 3*: Based on the hashes created in the previous step, each peer computes an ordering list or order of peers. To do this, the ordering function will need to have knowledge of all the peers voting in the network, and is based on the hash of the proposed block. The first peer in the list is called the *leader*. The leader is responsible for collecting votes from other peers and sending the commit message.

- *Step 4*: Each peer votes. The leader collects all the votes and determines the supermajority of votes for a certain hash. The leader sends a commit message that contains the votes of the committing block. This response is called a commit.

- *Step 5*: After receiving the commit, the peers verify the commit and apply the block to the ledger. At this point, consensus is complete.

*** YAC - Failure to Reach Consensus

We have just covered the steps needed to reach successful consensus, but there are also points in which failure may
 occur. Next, we will cover a couple of the failure cases: broken leader and bad transactions from the ordering service.

In the case of a broken leader, the leader may act unfairly in the collection of votes, or it takes
 the leader too long to respond with a commit. In such situations, other peers set a time for receiving a
 commit message from the leader. If the timer expires, the next peer in the order list becomes the new leader.

In the case of bad transactions from the ordering service, the ordering service may forward transactions that do not pass
 stateless validation. To rectify this, peers should remove those transactions from the proposal, and further compute the hash from the
 rest of the transactions in the proposal.

*** Mobile Libraries

One of the most defining characteristics of Hyperledger Iroha is its focus on providing mobile libraries.

A major goal with Hyperledger Iroha is creating a distributed ledger system that can be easily utilized by applications. In
 order to accomplish this, Hyperledger Iroha offers open source software libraries for iOS, Android, and Javascript. These libraries allow for
 simple compatibility with not only Hyperledger Iroha, but also, potentially, with other networks through flexible API functions.

If you would like to take a look, these libraries are all open source, and available on Github:


- Android: https://github.com/hyperledger/iroha-android
- iOS: https://github.com/hyperledger/iroha-ios

*** Relationship to Hyperledger Fabric and Hyperledger Sawtooth

One of the main goals at Hyperledger in the future is to have less disjointed projects, and more libraries that
 can be used together as components. With that vision in mind, Hyperledger Iroha wants to eventually provide the following C++ components
 that can be used by other Hyperledger projects:

- YAC consensus library
- Ed25519 digital signature library
- SHA-3 hashing library
- Iroha transaction serialization library
- P2P communication library
- iOS library
- Android library
- JavaScript library
- Blockchain explorer/data visualization suite

** Joining the Hyperledger Iroha Community


*** Joining the Hyperledger Iroha Community on GitHub

Hyperledger Iroha is an open source project where ideas and code can be publicly discussed, created, and reviewed. There are
 many ways to join the Hyperledger Iroha community, and we will share with you some of the ways to get
 involved, either from a technical standpoint, or from an ideas/issues creation perspective.

You can get involved with the Hyperledger Iroha community on GitHub. All code available on GitHub is forkable and viewable:


- https://github.com/hyperledger/iroha
- https://github.com/hyperledger/iroha-ios
- https://github.com/hyperledger/iroha-android
- https://github.com/hyperledger/iroha-javascript
- https://github.com/hyperledger/iroha-python
- https://github.com/hyperledger/iroha-scala
- https://github.com/hyperledger/iroha-dotnet
- https://github.com/hyperledger/iroha-api.

*** Joining the Hyperledger Iroha Community via Rocket.Chat and Mailing Lists
You can join the live conversations on Rocket.Chat (which is an alternative to Slack), using your Linux Foundation ID:


- https://chat.hyperledger.org/channel/iroha
- https://chat.hyperledger.org/channel/iroha-smartcontracts

Another option is to join the mailing list(s) for technical discussions and announcements: https://lists.hyperledger.org/mailman/listinfo/hyperledger-iroha

** Conclusions & Learning Objectives (Review)

You should now be able to:

- Understand the basics of Hyperledger Iroha v0.95.
- Discuss crucial components of the Hyperledger Iroha architecture, including the consensus algorithm YAC (Yet Another Consensus), peers, clients and the ledger block storage Ametsuchi.
- Join the Hyperledger Iroha framework discussion and development.

The Hyperledger Iroha team has been actively working on creating API documents. If you are interested in taking a look and testing for yourself, you can visit https://hyperledger.github.io/iroha-api/#overview.

* Chapter 6. Introduction to Hyperledger Sawtooth

** Introduction & Learning Objectives 

By the end of this chapter you should be able to:

- Understand the basics of Hyperledger Sawtooth v0.8.
- Walk through a demonstrated scenario highlighting aspects of Hyperledger Sawtooth.
- Discuss crucial components of Hyperledger Sawtooth, including the consensus algorithm Proof of Elapsed Time, transaction families, batches, and validators.
- Set up a running Hyperledger Sawtooth network and test an application.
- Get involved in the framework discussion and development.

** Addressing Illegal, Unregulated, and Unreported Tuna Fishing (Demonstrated Scenario)

*** Defining Our Actors

- Sarah is the fisherman who sustainably and legally catches tuna.
- Tuna processing plant processes and bags the tuna after they have been caught.
- Regulators verify that the tuna has been legally and sustainably caught.
- Miriam is a restaurant owner who will serve as the recipient in this situation.

We will be describing how tuna fishing can be improved starting from the source, fisherman Sarah, and the process by which her tuna ends up at Miriam's restaurant.

*** Featured Hyperledger Sawtooth Elements

*Transaction validators* validate transactions.

*Transaction families* are smart contracts in Hyperledger Sawtooth. They define the operations that can be applied to transactions. Transaction families consist of both transaction processors (the server-side logic) and clients (for use from Web or mobile applications).

*Transaction processor* is the server-side business logic of transaction families that acts upon network assets.

*Transaction batches* are clusters of transactions that are either all committed to state or are all not committed to state.

*The network layer* is responsible for communicating between validators in a Hyperledger Sawtooth network, including performing initial connectivity, peer discovery, and message handling.

*Global state* contains the current state of the ledger and a chain of transaction invocations. The state for all transaction families is represented on each validator. The process of block validation on each validator ensures that the same transactions result in the same state transitions, and that the resulting data is the same for all participants in the network. The state is split into namespaces, which allow flexibility for transaction family authors to define, share, and reuse global state data between transaction processors.

*** Why Sawtooth?

Miriam is a restaurant owner looking to source high quality tuna, that have been caught responsibly. Whenever Miriam buys tuna
, she cannot be sure whether she can trust that the tuna she is purchasing is legally and sustainably caught, given
 the prominence of illegal and unreported tuna fishing. Luckily, Hyperledger Sawtooth can help!

Hyperledger Sawtooth is ideal for this scenario because of its ability to track an asset's (in this case tuna) provenance
 and journey. The ability to batch transactions together allows for all tuna within a catch to be entered as a
 whole. The distributed state agreement, novel consensus algorithm, and decoupled business logic from the consensus layer allow Miriam to be
 confident that she is buying tuna that has been legally caught.

*** The Supply Chain

Hyperledger Sawtooth is extremely scalable and able to withstand high throughput of data, which makes it a great option for production supply chain scenarios.

We will start with Sarah, our licensed tuna fisher, who sells her tuna to multiple restaurants. Sarah operates as a
 private business, in which her company frequently makes international deals. Through an application, Sarah is able to gain entry to
 a Hyperledger Sawtooth blockchain network comprised of other fishermen, as well as processing plants, regulators, and restaurant owners. Sarah, as
  well as the processing plants, have the ability to add and update information to this ledger as tuna passes through
 the supply chain, while regulators and restaurants have read access to ledger records.

*** The Tuna Asset

With each catch, Sarah records some information about each individual tuna, including: a unique ID number, the location and time
 of the catch, its weight, and who caught the fish. For the sake of simplicity, we will stick with these
 data attributes. However, in an actual application, many more details would be recorded, from toxicology, to other physical characteristics, such
 as the temperature of the tuna.

These details are saved in the global state as a *key/value* pair based on the specifications of a *transaction family*, while
 the *transaction processor* allows Sarah's application to effectively create a transaction on the ledger. Please see the example
 below:

#+BEGIN_SRC js
$ var tuna = { id: ‘0002’, holder: ‘Sarah’, location: { latitude: '15.623036831528264', longitude: '-158.466796875'}, when: '20170635123546', weight: ‘58lbs’ }
#+END_SRC

*** Recording a Catch

After Sarah catches her tuna and records data for each tuna, she is able to treat a haul of tuna
 as a single batch of transactions. As a reminder, transaction batches are clusters of transactions that are committed to state
 together. Using batches, Sarah is able to record many tuna together, while still being able to specify data for each
 tuna. If one of the tuna transactions is invalid, the entire shipment is invalidated, that is, no tuna within the batch of tuna is validated.

*** Reaching Consensus








